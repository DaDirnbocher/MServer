import org.apache.tools.ant.filters.ReplaceTokens

import java.nio.file.Files

apply plugin: 'java'
apply plugin: 'distribution'
apply plugin: 'maven'
apply from: "${project.rootDir}/gradle/eclipse.gradle"
buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "gradle.plugin.com.github.jk1:gradle-license-report:0.3.12"
  }
}
apply plugin: "com.github.jk1.dependency-license-report"

sourceCompatibility = 1.8
targetCompatibility = 1.8
group = 'de.mediathekview'
archivesBaseName = "MServer"
version = '4.0.0'

def jarName = 'MServer.jar'
def mainClass = 'de.mediathekview.mserver.ui.config.MServerConfigUI'

compileJava {
    options.encoding = "UTF-8"
    options.compilerArgs = ['-Xlint:all']
}
compileTestJava {
    options.encoding = "UTF-8"
    options.compilerArgs = ['-Xlint:all']
}

task copyRuntimeLibs(type: Copy) {
    into "libs"
    from configurations.testRuntime - configurations.runtime
}

task copyTestResources(type: Copy) {
    from "${projectDir}/src/test/resources"
    into "${buildDir}/classes/test"
}
processTestResources.dependsOn copyTestResources

repositories {
    mavenLocal()
    mavenCentral()
}

configurations {
    deployerJars
    developTestCompile.extendsFrom testCompile
    developTestRuntime.extendsFrom testRuntime
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
    performanceTestCompile.extendsFrom testCompile
    performanceTestRuntime.extendsFrom testRuntime
}

test {
	exclude 'mServer/developTest/**'
	exclude 'mServer/integrationTest/**'
	exclude 'mServer/performanceTest/**'
}

task developTest(type: Test) {
    include 'mServer/developTest/**'
    
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }
}

task integrationTest(type: Test) {
	include 'mServer/integrationTest/**'
	    
	beforeTest { descriptor ->
		logger.lifecycle("Running test: " + descriptor)
	}
}

task performanceTest(type: Test) {
    include 'mServer/performanceTest/**'
    
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

dependencies {
    compile 'de.mediathekview:MLib:4.0.0-SNAPSHOT'
    compile 'commons-net:commons-net:3.5'
    compile 'org.apache.commons:commons-compress:1.12'
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'org.tukaani:xz:1.5'
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'org.glassfish.jersey.core:jersey-client:2.25'
    compile 'org.jsoup:jsoup:1.10.3'

    compile 'org.apache.logging.log4j:log4j-core:2.7'
    compile 'fm.void.jetm:jetm:1.2.3'

    testCompile "junit:junit:4.12"
    testCompile "org.mockito:mockito-core:2.8.9"
    testCompile "org.powermock:powermock-core:1.7.3"
    testCompile "org.powermock:powermock-api-mockito2:1.7.3"
    testCompile "org.powermock:powermock-module-junit4:1.7.3"
    testCompile "org.hamcrest:hamcrest-all:1.3"
    testCompile "com.github.tomakehurst:wiremock:2.11.0"
    testCompile "org.mockftpserver:MockFtpServer:2.7.1"
}

configurations.compile {
    resolutionStrategy.dependencySubstitution {
        def substituteIfExists = { String moduleName, String projectName ->
            if(findProject(projectName)) {
               assert !(project.hasProperty('org.gradle.configureondemand') && Boolean.valueOf(project.getProperty('org.gradle.configureondemand'))) : "org.gradle.configureondemand = true will cause problems when substituting a project"
               logger.lifecycle "$project: Substituting module '$moduleName' with project $projectName"
               substitute module(moduleName) with project(projectName)
            }
        }
        substituteIfExists('de.mediathekview:MLib', ':MLib')
    }
}

ext {
    propsFile = file('src/main/resources/version.properties').absoluteFile
    if (!propsFile.exists()) {
        Files.createFile(propsFile.toPath())
    }
}

def loadVersionProperties() {
    Properties props = new Properties()
    props.load(propsFile.newDataInputStream())
    return props
}

if (project.hasProperty('SONATYPE_USERNAME')) {
    signing {
        sign configurations.archives
    }
	
	uploadArchives {
	  repositories {
	    mavenDeployer {
	      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
	
	      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
	        authentication(userName: SONATYPE_USERNAME, password: SONATYPE_PASSWORD)
	      }
	
	      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
	        authentication(userName: SONATYPE_USERNAME, password: SONATYPE_PASSWORD)
	      }
	
	      pom.project {
	        name project.name
	        packaging 'jar'
	        description 'The crawler for mediathekview/MediathekView'
	        url 'https://github.com/mediathekview/' + project.name
	
	        scm {
	          connection 'scm:git:git://github.com/mediathekview/MServer.git'
	          developerConnection 'scm:git:ssh://github.com:mediathekview/MServer.git'
	          url 'http://github.com/mediathekview/MServer/tree/master'
	        }
	
	        licenses {
	          license {
	            name 'GNU General Public License v3.0'
	            url 'https://www.gnu.org/licenses/gpl.html'
	          }
	        }
	
	        developers {
	          developer {
	            id 'Nicklas2751'
	            name 'Nicklas Wiegandt'
	            email 'nicklas@mediathekview.de'
	          }
	          developer {
	            id 'derreisende77'
	            name 'Christian F.'
	            url 'https://github.com/derreisende77'
	          }
	          developer {
	            id 'pidoubleyou'
	            name 'Peter W.'
	            url 'https://github.com/pidoubleyou'
	          }
	          developer {
	            id 'TheSasch'
	            name 'Sascha Wiegandt'
	            url 'https://github.com/thesasch'
	          }
	        }
	      }
	    }
	  }
	}
	task myJavadocs(type: Javadoc) {
	  source = sourceSets.main.allJava
	  failOnError = false
	}
	
	task javadocJar(type: Jar) {
	    classifier = 'javadoc'
	    from myJavadocs
	}
	    
	task sourcesJar(type: Jar) {
	    classifier = 'sources'
	    from sourceSets.main.allSource
	}
	
	artifacts {
	    archives javadocJar, sourcesJar
	}
}
build.dependsOn(install)
task updateVersion {
    doLast {
        Properties props = loadVersionProperties()
        def oldVersion = props.getProperty('VERSION')
        String buildDate = new Date().format('dd.MM.yyyy HH:mm:ss')
        if (!oldVersion.equals(project.version)) {
            logger.lifecycle "==mserver======================"
            logger.lifecycle "Version: $project.version"
            logger.lifecycle "Baudatum: $buildDate"
            logger.lifecycle "==mserver======================"
            props.setProperty('VERSION', project.version)
            props.setProperty('DATE', buildDate)
            props.store(propsFile.newWriter(), null)
        }
    }
}

processResources.dependsOn updateVersion

licenseReport {
    outputDir = "build/Copyright/"
    excludes = [':MSearch', 'MediathekView:MLib']
    configurations = ['compile']
}

processResources.dependsOn generateLicenseReport

[distZip, distTar]*.shouldRunAfter compileJava, updateVersion, jar
distTar.compression = Compression.GZIP
distTar.extension = 'tar.gz'

jar {
    manifest {
        attributes(
                'Main-Class': mainClass,
                'Class-Path': configurations.runtime.files.collect { "lib/$it.name" }.join(' ')
        )
    }
    archiveName = jarName
}

distributions {
    main {
        baseName = 'MServer'
        contents {
            into('lib') {
                from configurations.compile
            }
            from('dist') {
                filesMatching('**/*.sh') {
                    filter(ReplaceTokens, tokens: [JARNAME: jarName])
                }
                filesMatching('**/*.txt') {
                    filter(ReplaceTokens, tokens: [JARNAME: jarName])
                }
                filesMatching('**/*.command') {
                    filter(ReplaceTokens, tokens: [JARNAME: jarName])
                }
            }
            from('build/libs') {
                include '*.jar'
            }
            from('build') {
                include 'Copyright/*'
            }
        }
    }
}

/**
 * This is how you pass arguments: "./gradlew run -Pargs=arg1,arg2,arg3
 */
task run(type: JavaExec, dependsOn: classes) {
    main = mainClass
    classpath = sourceSets.main.runtimeClasspath

    if (project.hasProperty('args')) {
        args(project.args.split(','))
    }
}

/**
 * HOWTO debug:
 *  1. run "gradle debug"
 *  2. Call your IDE to connect to a remote java application on port 5005.
 *
 * This is how you pass arguments: "./gradlew debug -Pargs=arg1,arg2,arg3
 */
task debug(type: JavaExec, dependsOn: classes) {
    main = mainClass
    classpath = sourceSets.main.runtimeClasspath
    debug true

    if (project.hasProperty('args')) {
        args(project.args.split(','))
    }
}

/**
 * <b>You don't have to call this. Travis will do it for you if a new releass (tag) will be build!<b/>
 * Call this so: './gradlew build release -PrepoPw=[PASSWORD]'
 */
task release(dependsOn: 'uploadArchives') {
    doLast {
        println 'Released Version '+version
    }
}

/**
 * <b>You don't have to call this. Travis will do it for you if you push to develop!<b/>
 * Call this so: './gradlew build releaseSnapshot -PrepoPw=[PASSWORD]'
 */
task releaseSnapshot(dependsOn: 'uploadArchives') {
    doLast {
        println 'Released Snapshot Version '+version
    }
}

gradle.taskGraph.whenReady {taskGraph ->
    if (!taskGraph.hasTask(release)) {
        version = version+'-SNAPSHOT'
    }
}

